var _user$project$Main$renderHome = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$img,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$src('http://i.ndtvimg.com/i/2015-07/minion-gabbar_470x471_51437144751.jpg')
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'welcome home, ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								model.email,
								A2(_elm_lang$core$Basics_ops['++'], ', it\'s been a minute.. also your password is ', model.password))))
					]))
			]));
};
var _user$project$Main$decodeResponse = A2(
	_elm_lang$core$Json_Decode$at,
	_elm_lang$core$Native_List.fromArray(
		['email']),
	_elm_lang$core$Json_Decode$string);
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$areEmpty = function (error) {
	return _elm_lang$core$Native_Utils.eq(error, '');
};
var _user$project$Main$Model = F7(
	function (a, b, c, d, e, f, g) {
		return {email: a, password: b, passwordAgain: c, response: d, errors: e, page: f, hide: g};
	});
var _user$project$Main$Errors = F2(
	function (a, b) {
		return {email: a, password: b};
	});
var _user$project$Main$initialErrors = A2(_user$project$Main$Errors, '', '');
var _user$project$Main$Home = {ctor: 'Home'};
var _user$project$Main$Login = {ctor: 'Login'};
var _user$project$Main$model = A7(_user$project$Main$Model, '', '', '', '', _user$project$Main$initialErrors, _user$project$Main$Login, true);
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Main$model, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Main$FailureToMessage = function (a) {
	return {ctor: 'FailureToMessage', _0: a};
};
var _user$project$Main$SuccessToMessage = function (a) {
	return {ctor: 'SuccessToMessage', _0: a};
};
var _user$project$Main$submitData = function (model) {
	var url = 'http://jsonplaceholder.typicode.com/users/1';
	return A3(
		_elm_lang$core$Task$perform,
		_user$project$Main$FailureToMessage,
		_user$project$Main$SuccessToMessage,
		A2(_evancz$elm_http$Http$get, _user$project$Main$decodeResponse, url));
};
var _user$project$Main$validateSubmission = function (model) {
	var newErrors = {
		email: _elm_lang$core$Native_Utils.eq(model.email, '') ? 'Enter an email address' : '',
		password: _elm_lang$core$Native_Utils.eq(model.password, '') ? 'Enter a password!' : (_elm_lang$core$Native_Utils.eq(model.passwordAgain, '') ? 'Please re-enter your password!' : ((!_elm_lang$core$Native_Utils.eq(model.password, model.passwordAgain)) ? 'Passwords don\'t match' : ''))
	};
	return (_elm_lang$core$Native_Utils.eq(newErrors.email, '') && _elm_lang$core$Native_Utils.eq(newErrors.password, '')) ? {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_Utils.update(
			model,
			{errors: newErrors}),
		_1: _user$project$Main$submitData(model)
	} : {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_Utils.update(
			model,
			{errors: newErrors}),
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Email':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{email: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Password':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{password: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'PasswordAgain':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{passwordAgain: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Validate':
				return _user$project$Main$validateSubmission(model);
			case 'SuccessToMessage':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{response: _p0._0, page: _user$project$Main$Home}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{response: 'ERROR!'}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$Validate = {ctor: 'Validate'};
var _user$project$Main$PasswordAgain = function (a) {
	return {ctor: 'PasswordAgain', _0: a};
};
var _user$project$Main$Password = function (a) {
	return {ctor: 'Password', _0: a};
};
var _user$project$Main$Email = function (a) {
	return {ctor: 'Email', _0: a};
};
var _user$project$Main$renderLogin = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$input,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$type$('text'),
						_elm_lang$html$Html_Attributes$placeholder('Email'),
						_elm_lang$html$Html_Events$onInput(_user$project$Main$Email)
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('validation-error'),
						_elm_lang$html$Html_Attributes$style(
						_elm_lang$core$Native_List.fromArray(
							[
								{ctor: '_Tuple2', _0: 'color', _1: 'red'}
							]))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(model.errors.email)
					])),
				A2(
				_elm_lang$html$Html$input,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$type$('password'),
						_elm_lang$html$Html_Attributes$placeholder('Password'),
						_elm_lang$html$Html_Events$onInput(_user$project$Main$Password)
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$input,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$type$('password'),
						_elm_lang$html$Html_Attributes$placeholder('Re-enter Password'),
						_elm_lang$html$Html_Events$onInput(_user$project$Main$PasswordAgain)
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('validation-error'),
						_elm_lang$html$Html_Attributes$style(
						_elm_lang$core$Native_List.fromArray(
							[
								{ctor: '_Tuple2', _0: 'color', _1: 'red'}
							]))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(model.errors.password)
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$Main$Validate)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Submit')
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('response')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(model.response)
					]))
			]));
};
var _user$project$Main$view = function (model) {
	var _p1 = model.page;
	if (_p1.ctor === 'Login') {
		return _user$project$Main$renderLogin(model);
	} else {
		return _user$project$Main$renderHome(model);
	}
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, subscriptions: _user$project$Main$subscriptions, view: _user$project$Main$view, update: _user$project$Main$update})
};
